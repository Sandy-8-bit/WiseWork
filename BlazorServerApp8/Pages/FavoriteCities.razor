@page "/favorite-cities"
@using BlazorWasmApp.Models
@inject WeatherService WeatherService
@inject NavigationManager NavigationManager
@inject MongoDBService MongoDBService
@inject IJSRuntime JSRuntime
@inject SupabaseAuthService AuthService

<div class="app-container">
    <div class="app-header">
        <h1>Your Favorite Cities</h1>
        <p>Click on a city to view detailed weather information or remove it from your list.</p>
    </div>
    <button @onclick="LogoutAsync">Logout</button>

    @if (favoriteCities == null)
    {
        <p>Loading your favorite cities...</p>
    }
    <p>Debug: Favorite Cities Count: @favoriteCities?.Count</p>

    @if (favoriteCities != null && favoriteCities.Any())
    {
        <div class="app-city-list">
            @foreach (var favorite in favoriteCities)
            {
                <div class="app-city-item">
                    <div>
                        <h4>@favorite</h4>
                        @if (cityWeatherData.ContainsKey(favorite))
                        {
                            var weather = cityWeatherData[favorite];
                            <p><strong>Temp:</strong> @weather.main.temp °C</p>
                            <p><strong>Desc:</strong> @weather.weather.FirstOrDefault()?.description</p>
                        }
                        else
                        {
                            <p>Loading weather...</p>
                        }
                    </div>
                    <div>
                        <button class="app-city-button" @onclick="() => ShowWeather(favorite)">Details</button>
                        <button class="app-delete-button" @onclick="() => DeleteCity(favorite)">Remove</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="app-empty-message">You have no favorite cities. Add some to view their weather here!</p>
    }

    @if (selectedCity != null && weatherData != null)
    {
        <div class="app-weather-container">
            <h2>Weather in @weatherData?.name</h2>
            <p><strong>Temperature:</strong> @weatherData?.main?.temp °C</p>
            <p><strong>Feels Like:</strong> @weatherData?.main?.feels_like °C</p>
            <p><strong>Humidity:</strong> @weatherData?.main?.humidity %</p>
            <p><strong>Description:</strong> @weatherData?.weather?.FirstOrDefault()?.description</p>
            <img src="https://openweathermap.org/img/w/@($"{weatherData?.weather?.FirstOrDefault()?.icon}.png")"
                 alt="Weather Icon" />
            <button @onclick="CloseWeather">Close</button>
        </div>
    }
</div>

@code {
    private List<string>? favoriteCities;
    private Dictionary<string, WeatherResponse> cityWeatherData = new();
    private WeatherResponse? weatherData;
    private string? selectedCity;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = AuthService.GetCurrentUser();
            if (user == null)
            {
                Console.WriteLine("User not logged in.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Retrieve cities associated with the logged-in user ID
            var favoriteCityObjects = await MongoDBService.GetFavoriteCitiesAsync(user.Id!);

            if (favoriteCityObjects != null && favoriteCityObjects.Any())
            {
                Console.WriteLine("Favorite cities retrieved from MongoDB:");
                foreach (var city in favoriteCityObjects)
                {
                    Console.WriteLine($"- {city.CityName}");
                }
                favoriteCities = favoriteCityObjects
                    .Where(city => !string.IsNullOrEmpty(city.CityName))
                    .Select(city => city.CityName!)
                    .ToList();
            }
            else
            {
                Console.WriteLine("No favorite cities found for the user.");
            }

            Console.WriteLine("Favorite cities list: " + (favoriteCities?.Count.ToString() ?? "No cities found"));

            if (favoriteCities != null && favoriteCities.Any())
            {
                foreach (var city in favoriteCities)
                {
                    await LoadWeatherPreview(city);
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading favorite cities: {ex.Message}");
        }
    }


    private async Task LoadWeatherPreview(string city)
    {
        if (string.IsNullOrEmpty(city)) return;

        try
        {
            Console.WriteLine($"Fetching weather for {city}...");
            var weather = await WeatherService.GetWeatherAsync(city);
            if (weather != null)
            {
                cityWeatherData[city] = weather;
                Console.WriteLine($"Weather data for {city} loaded.");
            }
            else
            {
                Console.WriteLine($"Weather data for {city} not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather for {city}: {ex.Message}");
        }
    }


    private async Task ShowWeather(string city)
    {
        try
        {
            selectedCity = city;
            weatherData = await WeatherService.GetWeatherAsync(city);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing weather: {ex.Message}");
        }
    }

    private async Task DeleteCity(string city)
    {
        try
        {
            var user = AuthService.GetCurrentUser();
            if (user == null) return;

            await MongoDBService.RemoveFavoriteCityAsync(user.Id!, city);
            favoriteCities?.Remove(city);
            cityWeatherData.Remove(city);

            if (selectedCity == city)
            {
                selectedCity = null;
                weatherData = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing city: {ex.Message}");
        }
    }

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void CloseWeather()
    {
        selectedCity = null;
        weatherData = null;
    }
}
