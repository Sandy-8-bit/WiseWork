@page "/weather"
@inject MongoDBService MongoDBService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SupabaseAuthService AuthService
@inject WeatherService WeatherService
@using BlazorWasmApp.Models

<h2>Weather Dashboard</h2>

<!-- Search Bar -->

<div class="search-container">
    <div class="search-box">
        <input type="text" @bind="city" placeholder="Enter city" class="search-input" />
        <button @onclick="GetWeather" class="btn-search">Search</button>
    </div>
</div>

<!-- Favorite Cities Section -->
<div class="favorites-section">
    <h3>Your Favorite Cities</h3>
    @if (favoriteCities?.Any() == true)
    {
        <ul class="favorite-cities">
            @foreach (var favorite in favoriteCities)
            {
                <li class="favorite-item">
                    <div class="city-details">
                        <strong>@favorite</strong>
                        @if (cityWeatherData.ContainsKey(favorite))
                        {
                            <div class="weather-preview">
                                <p>Temp: @cityWeatherData[favorite].main.temp 째C</p>
                                <p>@cityWeatherData[favorite].weather.First().description</p>
                            </div>
                        }
                    </div>
                    <div class="actions">
                        <button @onclick="() => RemoveCity(favorite)" class="btn-remove">Remove</button>
                        @if (favorite != homeCity)
                        {
                            <button @onclick="() => SetAsHomeCity(favorite)" class="btn-set-home">Set as Home</button>
                        }
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="no-favorite-message">No favorite cities found.</p>
    }
</div>

<!-- Weather Details Section -->
@if (isLoading)
{
    <p class="loading-text">Loading...</p>
}
else if (error)
{
    <p class="error-text">Error retrieving weather data. Please try again.</p>
}
else if (weatherData != null)
{
    <div class="weather-card">
        <h3>Weather in @weatherData.name</h3>
        <p>Temperature: @weatherData.main.temp 째C</p>
        <p>Feels Like: @weatherData.main.feels_like 째C</p>
        <p>Humidity: @weatherData.main.humidity %</p>
        <p>Description: @weatherData.weather.First().description</p>
        <img src="https://openweathermap.org/img/w/@($"{weatherData.weather.First().icon}.png")" alt="Weather Icon" class="weather-icon" />

        <button @onclick="() => AddToFavorites(city)" class="btn-add-favorite">Add to Favorites</button>
        <button @onclick="ShowFiveDayForecast" class="btn-show-forecast">Show 5-Day Forecast</button>
        <button @onclick="() => SetAsHomeCity(city)" class="btn-set-home">Set as Home City</button>
    </div>
}

<!-- 5-Day Forecast -->
@if (forecastData != null)
{
    <h3 class="forecast-title">5-Day Forecast for @city</h3>
    <div class="forecast-container">
        @foreach (var day in forecastData.list)
        {
            <div class="forecast-card">
                <h4>@DateTime.Parse(day.dt_txt).ToString("dddd")</h4>
                <p>Temp: @day.main.temp 째C</p>
                <p>Humidity: @day.main.humidity %</p>
                <p>@day.weather.First().description</p>
                <img src="https://openweathermap.org/img/w/@($"{day.weather.First().icon}.png")" alt="Weather Icon" class="forecast-icon" />
            </div>
        }
    </div>
}

@code {
    private string? city;
    private WeatherResponse? weatherData;
    private ForecastResponse? forecastData;
    private bool isLoading;
    private bool error;
    private List<string>? favoriteCities;
    private Dictionary<string, WeatherResponse> cityWeatherData = new();
    private string? homeCity;

    protected override async Task OnInitializedAsync()
    {
        var user = AuthService.GetCurrentUser();
        if (user == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        favoriteCities = (await MongoDBService.GetFavoriteCitiesAsync(user.Id!))
            .Where(c => !string.IsNullOrEmpty(c.CityName))
            .Select(c => c.CityName!)
            .ToList();

        var homeCityObj = await MongoDBService.GetHomeCityAsync(user.Id!);
        homeCity = homeCityObj?.CityName;

        if (!string.IsNullOrEmpty(homeCity))
        {
            await LoadWeatherPreview(homeCity);
        }

        foreach (var favorite in favoriteCities)
        {
            await LoadWeatherPreview(favorite);
        }
    }

    private async Task SetAsHomeCity(string city)
    {
        var user = AuthService.GetCurrentUser();
        if (user == null) return;

        await MongoDBService.SetHomeCityAsync(user.Id!, city);
        homeCity = city;

        await JSRuntime.InvokeVoidAsync("showToast", $"{city} is now your home city.", "success");
        StateHasChanged();
    }

    private async Task AddToFavorites(string city)
    {
        var user = AuthService.GetCurrentUser();
        if (user == null) return;

        await MongoDBService.AddFavoriteCityAsync(user.Id!, city);
        favoriteCities?.Add(city);

        await JSRuntime.InvokeVoidAsync("showToast", $"{city} added to favorites.", "success");
        await LoadWeatherPreview(city);
        StateHasChanged();
    }

    private async Task RemoveCity(string city)
    {
        var user = AuthService.GetCurrentUser();
        if (user == null) return;

        await MongoDBService.RemoveFavoriteCityAsync(user.Id!, city);
        favoriteCities?.Remove(city);
        cityWeatherData.Remove(city);

        StateHasChanged();
    }

    private async Task GetWeather()
    {
        try
        {
            isLoading = true;
            error = false;
            weatherData = await WeatherService.GetWeatherAsync(city!);
        }
        catch
        {
            error = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowFiveDayForecast()
    {
        try
        {
            isLoading = true;
            forecastData = await WeatherService.GetFiveDayForecastAsync(city!);
        }
        catch
        {
            error = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadWeatherPreview(string city)
    {
        try
        {
            var weather = await WeatherService.GetWeatherAsync(city);
            if (weather != null)
            {
                cityWeatherData[city] = weather;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather for {city}: {ex.Message}");
        }
    }
}


<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(to right, #ece9e6, #ffffff);
        color: #333;
        margin: 0;
        padding: 0;
    }

    h2 {
        text-align: center;
        color: #444;
        padding: 20px 0;
    }

    .search-container {
        width: 100%;
        background-color: #f7f7f7;
        padding: 15px 0;
        position: sticky;
        top: 0;
        z-index: 10;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .search-box {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 800px;
        margin: 0 auto;
    }

    .search-input {
        flex-grow: 1;
        max-width: 600px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
    }

    .btn-search {
        background: #4caf50;
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .favorites-section {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .favorite-cities {
        list-style: none;
        padding: 0;
    }

        .favorite-cities li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f7f7f7;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

    .btn-remove,
    .btn-set-home {
        background: #ff4c4c;
        border: none;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-set-home {
        background: #ffa500;
    }

    .loading-text,
    .error-text,
    .no-favorite-message {
        text-align: center;
        color: #777;
        margin-top: 20px;
        
    }
    .actions{
        width:200px;
        display:flex;
        justify-content:space-between
    }
</style>
