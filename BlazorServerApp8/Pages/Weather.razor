@page "/weather"
@inject WeatherService WeatherService
@inject NavigationManager NavigationManager
@using BlazorWasmApp.Models
@inject IJSRuntime JSRuntime
@inject MongoDBService MongoDBService
@inject SupabaseAuthService AuthService

<h3 class="page-title">Weather Information</h3>

<div class="search-container">
    <input type="text" @bind="city" placeholder="Enter city" class="search-input" />
    <button @onclick="GetWeather" class="search-button">Search</button>
</div>

@if (AuthService.GetCurrentUser() == null)
{
    NavigationManager.NavigateTo("/login");
}

@if (isLoading)
{
    <p class="loading-text">Loading...</p>
}
else if (error)
{
    <p class="error-text">Error retrieving weather data. Please try again.</p>
}
else if (weatherData != null)
{
    <div class="weather-card">
        <h3>Weather in @weatherData.name</h3>
        <p>Temperature: @weatherData.main.temp 째C</p>
        <p>Feels Like: @weatherData.main.feels_like 째C</p>
        <p>Humidity: @weatherData.main.humidity %</p>
        <p>Description: @weatherData.weather.First().description</p>
        <img src="https://openweathermap.org/img/w/@($"{weatherData.weather.First().icon}.png")" alt="Weather Icon" class="weather-icon" />

        <button @onclick="() => AddToFavorites(city)" class="button-add-favorite">
            Add to Favorites
        </button>

        <button @onclick="ShowFiveDayForecast" class="button-show-forecast">
            Show 5-Day Forecast
        </button>
    </div>
}

@if (favoriteCities != null && favoriteCities.Any())
{
    <h3 class="favorite-cities-title">Your Favorite Cities</h3>
    <table class="favorite-cities-table">
        <thead>
            <tr>
                <th>City</th>
                <th>Temperature (째C)</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in favoriteCities)
            {
                <tr>
                    <td>@city</td>
                    <td>@(cityWeatherData.ContainsKey(city) ? cityWeatherData[city].main.temp.ToString() : "Loading...")</td>
                    <td>@(cityWeatherData.ContainsKey(city) ? cityWeatherData[city].weather.FirstOrDefault()?.description : "Loading...")</td>
                    <td>
                        <button @onclick="() => RemoveFromFavorites(city)" class="button-remove-favorite">
                            Remove
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="no-favorites-text">You have no favorite cities added yet.</p>
}

@if (forecastData != null)
{
    <h3 class="forecast-title">5-Day Forecast for @city</h3>

    <div class="forecast-container">
        @foreach (var day in forecastData.list)
        {
            <div class="forecast-card">
                <h4>@DateTime.Parse(day.dt_txt).ToString("dddd")</h4>
                <p>Temp: @day.main.temp 째C</p>
                <p>Humidity: @day.main.humidity %</p>
                <p>@day.weather.First().description</p>
                <img src="https://openweathermap.org/img/w/@($"{day.weather.First().icon}.png")" alt="Weather Icon" class="forecast-icon" />
            </div>
        }
    </div>
}

@code {
    private string? city;
    private WeatherResponse? weatherData;
    private ForecastResponse? forecastData; // 5-day forecast data
    private bool isLoading;
    private bool error;
    private List<string>? favoriteCities;
    private Dictionary<string, WeatherResponse> cityWeatherData = new();

    protected override async Task OnInitializedAsync()
    {
        var user = AuthService.GetCurrentUser();
        if (user == null)
        {
            Console.WriteLine("User not logged in.");
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Retrieve the list of favorite cities for the logged-in user
        var favoriteCityObjects = await MongoDBService.GetFavoriteCitiesAsync(user.Id!);

        favoriteCities = favoriteCityObjects
            .Where(city => !string.IsNullOrEmpty(city.CityName))
            .Select(city => city.CityName!)
            .ToList();

        foreach (var city in favoriteCities)
        {
            await LoadWeatherPreview(city);
        }
    }

    private async Task LoadWeatherPreview(string city)
    {
        if (string.IsNullOrEmpty(city)) return;

        try
        {
            var weather = await WeatherService.GetWeatherAsync(city);
            if (weather != null)
            {
                cityWeatherData[city] = weather;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading weather for {city}: {ex.Message}");
            Console.WriteLine(ex.StackTrace);  // Optional: log the full stack trace for more details
        }
    }

    private async Task AddToFavorites(string city)
    {
        try
        {
            var user = AuthService.GetCurrentUser();
            if (user == null) return;

            await MongoDBService.AddFavoriteCityAsync(user.Id!, city);
            favoriteCities?.Add(city);
            await JSRuntime.InvokeVoidAsync("showToast", $"{city} has been added to favorites.", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding city to favorites: {ex.Message}");
            Console.WriteLine(ex.StackTrace);  // Optional: log the full stack trace for more details
            await JSRuntime.InvokeVoidAsync("showToast", "Error adding city to favorites.", "error");
        }
    }

    private async Task RemoveFromFavorites(string city)
    {
        try
        {
            var user = AuthService.GetCurrentUser();
            if (user == null) return;

            await MongoDBService.RemoveFavoriteCityAsync(user.Id!, city);
            favoriteCities?.Remove(city);
            cityWeatherData.Remove(city);
            await JSRuntime.InvokeVoidAsync("showToast", $"{city} has been removed from favorites.", "success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing city from favorites: {ex.Message}");
            Console.WriteLine(ex.StackTrace);  // Optional: log the full stack trace for more details
            await JSRuntime.InvokeVoidAsync("showToast", "Error removing city from favorites.", "error");
        }
    }

    private async Task GetWeather()
    {
        try
        {
            isLoading = true;
            error = false;

            weatherData = await WeatherService.GetWeatherAsync(city!);

            if (weatherData == null)
            {
                error = true;
            }
        }
        catch (Exception ex)
        {
            error = true;
            Console.WriteLine($"Error retrieving weather: {ex.Message}");
            Console.WriteLine(ex.StackTrace);  // Optional: log the full stack trace for more details
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowFiveDayForecast()
    {
        try
        {
            isLoading = true;
            error = false;

            forecastData = await WeatherService.GetFiveDayForecastAsync(city!);
        }
        catch (Exception ex)
        {
            error = true;
            Console.WriteLine($"Error retrieving 5-day forecast: {ex.Message}");
            Console.WriteLine(ex.StackTrace);  // Optional: log the full stack trace for more details
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .page-title {
        text-align: center;
        margin: 20px;
        color: #007bff;
    }

    .search-container {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

    .search-input {
        padding: 10px;
        font-size: 16px;
        border: 2px solid #007bff;
        border-radius: 5px;
        margin-right: 10px;
    }

    .search-button {
        padding: 10px 15px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .loading-text,
    .error-text {
        text-align: center;
        font-size: 18px;
        color: #007bff;
    }

    .error-text {
        color: #ff4d4d;
    }

    .weather-card {
        text-align: center;
        border: 1px solid #007bff;
        border-radius: 5px;
        padding: 20px;
        background-color: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .weather-icon {
        width: 100px;
        margin: 10px 0;
    }

    .button-add-favorite,
    .button-show-forecast {
        padding: 10px 15px;
        font-size: 16px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .button-add-favorite:hover,
        .button-show-forecast:hover {
            background-color: #218838;
        }

    .favorite-cities-title {
        text-align: center;
        margin-top: 30px;
        font-size: 24px;
        color: #007bff;
    }

    .favorite-cities-table {
        width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
    }

        .favorite-cities-table th,
        .favorite-cities-table td {
            padding: 10px;
            text-align: center;
            border: 1px solid #007bff;
        }

        .favorite-cities-table th {
            background-color: #007bff;
            color: white;
        }

    .no-favorites-text {
        text-align: center;
        font-size: 18px;
        color: #007bff;
    }

    .forecast-title {
        text-align: center;
        margin-top: 30px;
        font-size: 24px;
        color: #007bff;
    }

    .forecast-container {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .forecast-card {
        border: 1px solid #007bff;
        border-radius: 5px;
        padding: 15px;
        margin: 10px;
        width: 150px;
        text-align: center;
        background-color: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .forecast-icon {
        width: 50px;
        margin: 5px 0;
    }
</style>
