@page "/login"
@inject SupabaseAuthService AuthService
@inject NavigationManager NavigationManager

<h3 class="login-title">Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@if (isLoading)
{
    <div class="text-center my-3">
        <p>Loading...</p>
        <img src="https://upload.wikimedia.org/wikipedia/commons/c/c7/Loading_2.gif" alt="Loading" style="width: 50px;" />
    </div>
}
else
{
    <div class="login-container">
        <div class="form-group">
            <label for="email">Email:</label>
            <input id="email" class="form-control" @bind="Email" type="email" placeholder="Enter your email" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input id="password" class="form-control" @bind="Password" type="password" placeholder="Enter your password" />
        </div>
        <div class="form-group text-center">
            <button class="btn btn-primary" @onclick="LoginAsync" disabled="@isLoading">Login</button>
        </div>
        <div class="form-group text-center">
            <button class="btn btn-secondary" @onclick="RegisterAsync" disabled="@isLoading">Register</button>
        </div>
    </div>
}

@code {
    private string Email = string.Empty;
    private string Password = string.Empty;
    private string? ErrorMessage;
    private bool isLoading = false;

    private async Task LoginAsync()
    {
        Console.WriteLine($"Attempting to log in with email: {Email}");
        isLoading = true;
        ErrorMessage = null;

        try
        {
            // Attempt login and persist session
            var user = await AuthService.LoginAsync(Email, Password);

            if (user != null)
            {
                Console.WriteLine("Login successful. Navigating to weather page...");
                NavigationManager.NavigateTo("/weather");
            }
            else
            {
                Console.WriteLine("LoginAsync returned null user.");
                ErrorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoginAsync exception: {ex}");
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RegisterAsync()
    {
        Console.WriteLine($"Attempting to register with email: {Email}");
        isLoading = true;
        ErrorMessage = null;

        try
        {
            // Attempt registration and persist session
            var user = await AuthService.RegisterAsync(Email, Password);
            if (user != null)
            {
                Console.WriteLine("Registration successful. Navigating to weather page...");
                NavigationManager.NavigateTo("/weather");
            }
            else
            {
                Console.WriteLine("RegisterAsync returned null user.");
                ErrorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"RegisterAsync exception: {ex}");
            ErrorMessage = $"Registration failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .login-title {
        text-align: center;
        color: #007bff;
        margin-bottom: 20px;
    }

    .login-container {
        background-color: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        font-weight: bold;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 12px;
        border-radius: 5px;
        border: 1px solid #ddd;
        font-size: 16px;
    }

    .form-group input:focus {
        border-color: #007bff;
        outline: none;
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        width: 100%;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }

    .text-danger {
        color: #dc3545;
        text-align: center;
        margin-bottom: 20px;
    }

    .loading-container {
        text-align: center;
        margin-top: 20px;
    }
</style>
