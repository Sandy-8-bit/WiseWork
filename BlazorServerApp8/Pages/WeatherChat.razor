@page "/weatherchat"
@using BlazorWasmApp.Models
@inject WeatherChatService ChatService
@inject IJSRuntime JSRuntime

<div class="chat-container">
    <div class="messages" @ref="messagesDiv">
        @foreach (var message in messages)
        {
            <div class="@(message.IsUser ? "user-message" : "bot-message")">
                @if (!message.IsUser && message.Weather != null)
                {
                    <div class="weather-card">
                        <div class="weather-header">
                            <h3>@message.Weather.name, @message.Weather.sys.country</h3>
                            @if (message.Weather.weather.Any())
                            {
                                <img src="@($"http://openweathermap.org/img/w/{message.Weather.weather[0].icon}.png")"
                                     alt="Weather icon" />
                            }
                        </div>
                        <div class="weather-body">
                            <div class="temp">@message.Weather.main.temp°C</div>
                            <div class="feels-like">Feels like @message.Weather.main.feels_like°C</div>
                        </div>
                    </div>
                }
                <div class="message-content">@message.Content</div>
            </div>
        }
        @if (isProcessing)
        {
            <div class="typing-indicator">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        }
    </div>

    <div class="input-container">
        <input @bind="userInput"
               @bind:event="oninput"
               @onkeypress="HandleKeyPress"
               placeholder="Ask about the weather in any city..."
               class="chat-input" />
        <button @onclick="SendMessage"
                disabled="@isProcessing"
                class="send-button">
            Send
        </button>
    </div>
</div>

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 12px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .messages {
        height: 500px;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 10px;
    }

    .user-message, .bot-message {
        margin: 10px;
        padding: 15px;
        border-radius: 12px;
        max-width: 80%;
    }

    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
    }

    .bot-message {
        background-color: #f8f9fa;
        border: 1px solid #eee;
        margin-right: auto;
    }

    .weather-card {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .weather-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

        .weather-header h3 {
            margin: 0;
            font-size: 1.2rem;
        }

    .weather-body {
        text-align: center;
    }

    .temp {
        font-size: 2rem;
        font-weight: bold;
        color: #333;
    }

    .feels-like {
        color: #666;
        font-size: 0.9rem;
    }

    .input-container {
        display: flex;
        gap: 10px;
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 16px;
    }

    .send-button {
        padding: 12px 24px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
    }

        .send-button:disabled {
            background-color: #ccc;
        }

    .typing-indicator {
        display: flex;
        gap: 4px;
        padding: 10px;
    }

    .dot {
        width: 8px;
        height: 8px;
        background-color: #ccc;
        border-radius: 50%;
        animation: bounce 1.4s infinite;
    }

        .dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .dot:nth-child(3) {
            animation-delay: 0.4s;
        }
</style>

@code {
    private string userInput = "";
    private List<(string Content, bool IsUser, WeatherResponse? Weather)> messages = new();
    private bool isProcessing = false;
    private ElementReference messagesDiv;

    // OnInitializedAsync no longer requires async as we are not doing any async operations
    protected override Task OnInitializedAsync()
    {
        messages.Add(("Hi! I can help you check the weather. Just ask me about the weather in any city!", false, null));
        return Task.CompletedTask;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isProcessing)
            return;

        var userMessage = userInput;
        userInput = "";
        isProcessing = true;

        messages.Add((userMessage, true, null));
        StateHasChanged();

        var (response, weather) = await ChatService.ProcessMessageAsync(userMessage);
        messages.Add((response, false, weather));

        isProcessing = false;
        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesDiv);
    }
}
