@page "/"
@inject WeatherService WeatherService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MongoDBService MongoDBService
@inject SupabaseAuthService AuthService
@using BlazorWasmApp.Models

<h3 class="page-title">Weather Information</h3>

@if (isLoading)
{
    <p class="loading-text">Loading...</p>
}
else if (error)
{
    <p class="error-text">Error retrieving weather data. Please try again.</p>
}
else if (!string.IsNullOrEmpty(homeCity) && cityWeatherData.ContainsKey(homeCity))
{
    <div class="home-weather-card">
        <h3>Home City: @homeCity</h3>
        <p>Temperature: @cityWeatherData[homeCity].main.temp °C</p>
        <p>Feels Like: @cityWeatherData[homeCity].main.feels_like °C</p>
        <p>Humidity: @cityWeatherData[homeCity].main.humidity %</p>
        <p>Description: @cityWeatherData[homeCity].weather.First().description</p>
        <img src="https://openweathermap.org/img/w/@($"{cityWeatherData[homeCity].weather.First().icon}.png")" alt="Weather Icon" class="weather-icon" />
    </div>
}
else
{
    <p class="no-home-city-text">No home city set. Please set a home city on the Weather page.</p>
}

@code {
    private bool isLoading;
    private bool error;
    private string? homeCity;
    private Dictionary<string, WeatherResponse> cityWeatherData = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadHomeCityWeather();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadHomeCityWeather();
    }

    private async Task LoadHomeCityWeather()
    {
        try
        {
            isLoading = true;
            error = false;

            var user = AuthService.GetCurrentUser();
            if (user == null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var homeCityObject = await MongoDBService.GetHomeCityAsync(user.Id!);
            homeCity = homeCityObject?.CityName;

            if (!string.IsNullOrEmpty(homeCity))
            {
                var weather = await WeatherService.GetWeatherAsync(homeCity);
                if (weather != null)
                {
                    cityWeatherData[homeCity] = weather;
                }
            }
        }
        catch (Exception ex)
        {
            error = true;
            Console.WriteLine($"Error loading home city weather: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
